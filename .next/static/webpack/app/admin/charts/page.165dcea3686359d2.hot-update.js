"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/charts/page",{

/***/ "(app-pages-browser)/./lib/formulaEngine.ts":
/*!******************************!*\
  !*** ./lib/formulaEngine.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   evaluateFormula: () => (/* binding */ evaluateFormula),\n/* harmony export */   evaluateFormulasBatch: () => (/* binding */ evaluateFormulasBatch),\n/* harmony export */   extractVariablesFromFormula: () => (/* binding */ extractVariablesFromFormula),\n/* harmony export */   getAvailableVariables: () => (/* binding */ getAvailableVariables),\n/* harmony export */   getVariableExample: () => (/* binding */ getVariableExample),\n/* harmony export */   isValidVariable: () => (/* binding */ isValidVariable),\n/* harmony export */   testFormula: () => (/* binding */ testFormula),\n/* harmony export */   validateFormula: () => (/* binding */ validateFormula)\n/* harmony export */ });\n/* harmony import */ var _chartConfigTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chartConfigTypes */ \"(app-pages-browser)/./lib/chartConfigTypes.ts\");\n// lib/formulaEngine.ts - Formula parsing and safe evaluation engine\n// Handles 42 dynamic variables with +, -, *, /, (), and math functions (MAX, MIN, ROUND, ABS)\n// Returns 'NA' for division by zero, missing variables, or invalid expressions\n\n/**\n * Variable mapping from display names to project stats field names\n * Maps [INDOOR] to stats.indoor, [FEMALE] to stats.female, etc.\n */ const VARIABLE_MAPPINGS = {\n    // Image Statistics\n    'REMOTE_IMAGES': 'remoteImages',\n    'HOSTESS_IMAGES': 'hostessImages',\n    'SELFIES': 'selfies',\n    'APPROVED_IMAGES': 'approvedImages',\n    'REJECTED_IMAGES': 'rejectedImages',\n    // Location Statistics\n    'INDOOR': 'indoor',\n    'OUTDOOR': 'outdoor',\n    'STADIUM': 'stadium',\n    // Demographics\n    'FEMALE': 'female',\n    'MALE': 'male',\n    'GEN_ALPHA': 'genAlpha',\n    'GEN_YZ': 'genYZ',\n    'GEN_X': 'genX',\n    'BOOMER': 'boomer',\n    // Merchandise\n    'MERCHED': 'merched',\n    'JERSEY': 'jersey',\n    'SCARF': 'scarf',\n    'FLAGS': 'flags',\n    'BASEBALL_CAP': 'baseballCap',\n    'OTHER': 'other',\n    // Visits & Engagement\n    'VISIT_QR_CODE': 'visitQrCode',\n    'VISIT_SHORT_URL': 'visitShortUrl',\n    'VISIT_WEB': 'visitWeb',\n    'VISIT_FACEBOOK': 'visitFacebook',\n    'VISIT_INSTAGRAM': 'visitInstagram',\n    'VISIT_YOUTUBE': 'visitYoutube',\n    'VISIT_TIKTOK': 'visitTiktok',\n    'VISIT_X': 'visitX',\n    'VISIT_TRUSTPILOT': 'visitTrustpilot',\n    // Event Metrics\n    'EVENT_ATTENDEES': 'eventAttendees',\n    'EVENT_TICKET_PURCHASES': 'eventTicketPurchases',\n    'EVENT_RESULT_HOME': 'eventResultHome',\n    'EVENT_RESULT_VISITOR': 'eventResultVisitor',\n    'EVENT_VALUE_PROPOSITION_VISITED': 'eventValuePropositionVisited',\n    'EVENT_VALUE_PROPOSITION_PURCHASES': 'eventValuePropositionPurchases',\n    // Merchandise Pricing Variables (configurable values for sales calculations)\n    'JERSEY_PRICE': 'jerseyPrice',\n    'SCARF_PRICE': 'scarfPrice',\n    'FLAGS_PRICE': 'flagsPrice',\n    'CAP_PRICE': 'capPrice',\n    'OTHER_PRICE': 'otherPrice'\n};\n/**\n * Safe mathematical functions that can be used in formulas\n * All functions handle edge cases and return 'NA' for invalid inputs\n */ const MATH_FUNCTIONS = {\n    /**\n   * Returns the maximum value from the provided arguments\n   * Example: MAX(10, 20, 5) returns 20\n   */ MAX: (...args)=>{\n        if (args.length === 0) return 'NA';\n        const validArgs = args.filter((arg)=>typeof arg === 'number' && !isNaN(arg));\n        if (validArgs.length === 0) return 'NA';\n        return Math.max(...validArgs);\n    },\n    /**\n   * Returns the minimum value from the provided arguments  \n   * Example: MIN(10, 20, 5) returns 5\n   */ MIN: (...args)=>{\n        if (args.length === 0) return 'NA';\n        const validArgs = args.filter((arg)=>typeof arg === 'number' && !isNaN(arg));\n        if (validArgs.length === 0) return 'NA';\n        return Math.min(...validArgs);\n    },\n    /**\n   * Rounds a number to the nearest integer\n   * Example: ROUND(10.7) returns 11\n   */ ROUND: (value)=>{\n        if (typeof value !== 'number' || isNaN(value)) return 'NA';\n        return Math.round(value);\n    },\n    /**\n   * Returns the absolute value of a number\n   * Example: ABS(-10) returns 10\n   */ ABS: (value)=>{\n        if (typeof value !== 'number' || isNaN(value)) return 'NA';\n        return Math.abs(value);\n    }\n};\n/**\n * Extracts all variable names used in a formula\n * Variables are identified by the pattern [VARIABLE_NAME]\n * @param formula - The formula string to analyze\n * @returns Array of variable names found in the formula\n */ function extractVariablesFromFormula(formula) {\n    const variableRegex = /\\[([A-Z_]+)\\]/g;\n    const variables = [];\n    let match;\n    while((match = variableRegex.exec(formula)) !== null){\n        const variableName = match[1];\n        if (!variables.includes(variableName)) {\n            variables.push(variableName);\n        }\n    }\n    return variables;\n}\n/**\n * Validates a formula for syntax correctness and variable existence\n * Checks for balanced parentheses, valid variables, and safe mathematical operations\n * @param formula - The formula string to validate\n * @returns Validation result with error details if invalid\n */ function validateFormula(formula) {\n    try {\n        // Extract variables from formula\n        const usedVariables = extractVariablesFromFormula(formula);\n        // Check if all variables are valid\n        const invalidVariables = usedVariables.filter((variable)=>!VARIABLE_MAPPINGS.hasOwnProperty(variable));\n        if (invalidVariables.length > 0) {\n            return {\n                isValid: false,\n                error: `Invalid variables: ${invalidVariables.join(', ')}`,\n                usedVariables\n            };\n        }\n        // Check for balanced parentheses\n        let openParens = 0;\n        for (const char of formula){\n            if (char === '(') openParens++;\n            if (char === ')') openParens--;\n            if (openParens < 0) {\n                return {\n                    isValid: false,\n                    error: 'Unbalanced parentheses: closing parenthesis without opening',\n                    usedVariables\n                };\n            }\n        }\n        if (openParens > 0) {\n            return {\n                isValid: false,\n                error: 'Unbalanced parentheses: unclosed opening parenthesis',\n                usedVariables\n            };\n        }\n        // Test evaluation with sample data (all variables set to 1)\n        const testStats = Object.fromEntries(Object.values(VARIABLE_MAPPINGS).map((field)=>[\n                field,\n                1\n            ]));\n        const testResult = evaluateFormula(formula, testStats);\n        return {\n            isValid: true,\n            usedVariables,\n            evaluatedResult: testResult\n        };\n    } catch (error) {\n        return {\n            isValid: false,\n            error: error instanceof Error ? error.message : 'Formula validation failed',\n            usedVariables: []\n        };\n    }\n}\n/**\n * Substitutes variables in a formula with their actual values from project stats\n * Replaces [VARIABLE_NAME] with the corresponding numeric value\n * @param formula - The formula string with variables\n * @param stats - Project statistics containing actual values\n * @returns Formula string with variables replaced by numbers\n */ function substituteVariables(formula, stats) {\n    let processedFormula = formula;\n    // Replace all variables with their actual values\n    for (const [variableName, fieldName] of Object.entries(VARIABLE_MAPPINGS)){\n        const variablePattern = new RegExp(`\\\\[${variableName}\\\\]`, 'g');\n        const value = stats[fieldName];\n        // Handle missing or undefined values\n        const actualValue = value !== undefined && value !== null ? value : 0;\n        processedFormula = processedFormula.replace(variablePattern, actualValue.toString());\n    }\n    return processedFormula;\n}\n/**\n * Processes mathematical functions in a formula string\n * Replaces function calls like MAX(1,2,3) with their evaluated results\n * @param formula - Formula string potentially containing function calls\n * @returns Formula string with functions evaluated\n */ function processMathFunctions(formula) {\n    let processedFormula = formula;\n    // Process each available math function\n    for (const [functionName, functionImpl] of Object.entries(MATH_FUNCTIONS)){\n        const functionRegex = new RegExp(`${functionName}\\\\(([^)]+)\\\\)`, 'g');\n        processedFormula = processedFormula.replace(functionRegex, (match, argsString)=>{\n            try {\n                // Parse arguments (handle nested expressions by evaluating them first)\n                const args = argsString.split(',').map((arg)=>{\n                    const trimmedArg = arg.trim();\n                    // If argument contains operators, evaluate it first\n                    if (/[+\\-*/()]/.test(trimmedArg)) {\n                        const argResult = evaluateSimpleExpression(trimmedArg);\n                        return typeof argResult === 'number' ? argResult : 0;\n                    }\n                    return parseFloat(trimmedArg);\n                });\n                // Call the function with parsed arguments\n                const result = functionImpl(...args);\n                return result === 'NA' ? 'NaN' : result.toString();\n            } catch (error) {\n                return 'NaN'; // Return NaN for any function evaluation errors\n            }\n        });\n    }\n    return processedFormula;\n}\n/**\n * Safely evaluates a simple mathematical expression\n * Handles basic arithmetic operations with division by zero protection\n * @param expression - Mathematical expression to evaluate\n * @returns Numeric result or 'NA' for errors\n */ function evaluateSimpleExpression(expression) {\n    try {\n        // Remove whitespace\n        const cleanExpression = expression.replace(/\\s+/g, '');\n        // Check for division by zero\n        if (/\\/\\s*0(?!\\d)/.test(cleanExpression)) {\n            return 'NA';\n        }\n        // Use Function constructor for safe evaluation (more secure than eval)\n        // This only allows mathematical operations, no access to global scope\n        const safeEval = new Function('return ' + cleanExpression);\n        const result = safeEval();\n        // Check for invalid results\n        if (typeof result !== 'number' || isNaN(result) || !isFinite(result)) {\n            return 'NA';\n        }\n        return result;\n    } catch (error) {\n        return 'NA';\n    }\n}\n/**\n * Main function to evaluate a formula against project statistics\n * Handles variable substitution, function processing, and safe evaluation\n * @param formula - The formula string to evaluate\n * @param stats - Project statistics for variable values\n * @returns Numeric result or 'NA' for errors/invalid results\n */ function evaluateFormula(formula, stats) {\n    try {\n        // Step 1: Substitute variables with actual values\n        const formulaWithValues = substituteVariables(formula, stats);\n        // Step 2: Process mathematical functions\n        const formulaWithFunctions = processMathFunctions(formulaWithValues);\n        // Step 3: Evaluate the final mathematical expression\n        const result = evaluateSimpleExpression(formulaWithFunctions);\n        return result;\n    } catch (error) {\n        console.error('Formula evaluation error:', error);\n        return 'NA';\n    }\n}\n/**\n * Batch evaluates multiple formulas against the same project statistics\n * More efficient than calling evaluateFormula multiple times\n * @param formulas - Array of formula strings to evaluate\n * @param stats - Project statistics for variable values  \n * @returns Array of results corresponding to input formulas\n */ function evaluateFormulasBatch(formulas, stats) {\n    return formulas.map((formula)=>evaluateFormula(formula, stats));\n}\n/**\n * Gets all available variables with their descriptions\n * Useful for building variable picker UIs\n * @returns Array of available variables with metadata\n */ function getAvailableVariables() {\n    return _chartConfigTypes__WEBPACK_IMPORTED_MODULE_0__.AVAILABLE_VARIABLES;\n}\n/**\n * Checks if a specific variable exists and is valid\n * @param variableName - Name of variable to check (e.g., \"INDOOR\", \"FEMALE\")\n * @returns Boolean indicating if variable is valid\n */ function isValidVariable(variableName) {\n    return VARIABLE_MAPPINGS.hasOwnProperty(variableName);\n}\n/**\n * Gets example usage for a specific variable\n * @param variableName - Name of variable to get example for\n * @returns Example formula using the variable, or null if variable is invalid\n */ function getVariableExample(variableName) {\n    const variable = _chartConfigTypes__WEBPACK_IMPORTED_MODULE_0__.AVAILABLE_VARIABLES.find((v)=>v.name === variableName);\n    return variable ? variable.exampleUsage : null;\n}\n/**\n * Test utility function for development and debugging\n * Evaluates a formula against sample test data\n * @param formula - Formula to test\n * @returns Test result with sample data\n */ function testFormula(formula) {\n    const sampleData = {\n        remoteImages: 10,\n        hostessImages: 25,\n        selfies: 15,\n        indoor: 50,\n        outdoor: 30,\n        stadium: 200,\n        female: 120,\n        male: 160,\n        genAlpha: 20,\n        genYZ: 100,\n        genX: 80,\n        boomer: 80,\n        merched: 40,\n        jersey: 15,\n        scarf: 8,\n        flags: 12,\n        baseballCap: 5,\n        other: 3,\n        approvedImages: 45,\n        rejectedImages: 5,\n        visitQrCode: 30,\n        visitShortUrl: 20,\n        visitWeb: 100,\n        visitFacebook: 25,\n        visitInstagram: 40,\n        visitYoutube: 15,\n        visitTiktok: 35,\n        visitX: 10,\n        visitTrustpilot: 5,\n        eventAttendees: 1000,\n        eventTicketPurchases: 850,\n        eventResultHome: 2,\n        eventResultVisitor: 1,\n        eventValuePropositionVisited: 75,\n        eventValuePropositionPurchases: 12\n    };\n    const result = evaluateFormula(formula, sampleData);\n    return {\n        result,\n        sampleData\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/formulaEngine.ts\n"));

/***/ })

});